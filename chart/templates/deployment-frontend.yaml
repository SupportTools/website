apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9113'
    prometheus.io/path: '/metrics'
  labels:
    app: website
    component: frontend
    team: SupportTools
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: website
      component: frontend
      team: SupportTools
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate      
  template:
    metadata:
      labels:
        app: website
        component: frontend
        team: SupportTools
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9113'
        prometheus.io/path: '/metrics'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: website
                  component: frontend
                  team: SupportTools
              topologyKey: "kubernetes.io/hostname"    
      imagePullSecrets:
      - name: dockerhub-supporttools
      containers:
        - name: website
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: nginx-cache
            mountPath: /var/cache/nginx/
          - name: nginx-config
            mountPath: /var/config/nginx/
          - name: var-run
            mountPath: /var/run/
          - name: nginx-log
            mountPath: /var/log/nginx/
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
        - name: exporter
          image: nginx/nginx-prometheus-exporter:latest
          imagePullPolicy: Always
          args:
            - -nginx.scrape-uri
            - http://127.0.0.1:8080/metrics      
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 32Mi
          ports:
            - name: metrics
              containerPort: 9113
              protocol: TCP
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
        - args:
            - tail
            - '-f'
            - /var/log/nginx/access.log
          image: busybox
          imagePullPolicy: Always
          name: access-logs
          volumeMounts:
            - mountPath: /var/log/nginx/
              name: nginx-log
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
        - args:
            - tail
            - '-f'
            - /var/log/nginx/error.log
          image: busybox
          imagePullPolicy: Always
          name: error-log
          volumeMounts:
            - mountPath: /var/log/nginx/
              name: nginx-log
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 32Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
        - args:
            - tail
            - '-f'
            - /var/log/nginx/json_access.log
          image: busybox
          imagePullPolicy: Always
          name: json-access-log
          volumeMounts:
            - mountPath: /var/log/nginx/
              name: nginx-log
      volumes:
      - emptyDir: {}
        name: nginx-cache
      - emptyDir: {}
        name: nginx-config
      - emptyDir: {}
        name: var-run
      - emptyDir: {}
        name: nginx-log