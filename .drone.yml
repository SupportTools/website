---
kind: pipeline
type: docker
name: Docker-Build-AMD64

platform:
  os: linux
  arch: amd64

clone:
  depth: 1

steps:
  - name: Docker-Build
    image: plugins/docker
    pull: always
    settings:
      registry: harbor.support.tools
      repo: harbor.support.tools/supporttools/website
      dry_run: true
      purge: false
      dockerfile: Dockerfile.AMD64
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest-amd64
        - latest      

  - name: Docker-Publish
    image: plugins/docker
    pull: always
    settings:
      registry: harbor.support.tools
      repo: harbor.support.tools/supporttools/website
      cache_from: "harbor.support.tools/supporttools/website:latest"
      purge: false
      dockerfile: Dockerfile.AMD64
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest-amd64
        - latest
      username:
        from_secret: harbor-username
      password:
        from_secret: harbor-password
      privileged: true
      volumes:
      - name: docker-data
        path: /var/lib/docker
    when:
     event:
     - deployment
     - promote

volumes:
- name: docker-data
  host:
    path: /opt/docker
---
kind: pipeline
type: docker
name: Docker-Build-ARM64

platform:
  os: linux
  arch: arm64

clone:
  depth: 1

steps:
  - name: Docker-Build
    image: plugins/docker
    pull: always
    settings:
      registry: harbor.support.tools
      repo: harbor.support.tools/supporttools/website
      dry_run: true
      purge: false
      dockerfile: Dockerfile.ARM64
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest-arm64
        - latest      

  - name: Docker-Publish
    image: plugins/docker
    pull: always
    settings:
      registry: harbor.support.tools
      repo: harbor.support.tools/supporttools/website
      cache_from: "harbor.support.tools/supporttools/website:latest"
      purge: false
      dockerfile: Dockerfile.ARM64
      tags:
        - ${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_BRANCH}
        - latest-arm64
        - latest
      username:
        from_secret: harbor-username
      password:
        from_secret: harbor-password
      privileged: true
      volumes:
      - name: docker-data
        path: /var/lib/docker
    when:
     event:
     - deployment
     - promote

volumes:
- name: docker-data
  host:
    path: /opt/docker
---
kind: pipeline
type: kubernetes
name: Deploy

platform:
  os: linux
  arch: amd64

clone:
  depth: 1

steps:
  - name: Customize-kube-files
    image: supporttools/kube-builder:32
    pull: always
    environment:
      APPENV: ${DRONE_COMMIT_BRANCH}
    commands:
      - bash ./deploy.sh

  - name: Deploy-to-Master
    image: supporttools/kube-builder:latest
    pull: always
    settings:
      kubernetes_server:
        from_secret: k8s_server
      kubernetes_token:
        from_secret: k8s_token
    commands:
      - kubectl create ns supporttools-website-master-${CI_BUILD_NUMBER}
      - kubectl label ns supporttools-website-master-${CI_BUILD_NUMBER} team=supporttools --overwrite
      - kubectl label ns supporttools-website-master-${CI_BUILD_NUMBER} app=supporttools-www --overwrite
      - kubectl label ns supporttools-website-master-${CI_BUILD_NUMBER} ns-purge=true --overwrite
      - kubectl label ns supporttools-website-master-${CI_BUILD_NUMBER} team=supporttools --overwrite
      - kubectl -n supporttools-website-master-${CI_BUILD_NUMBER} create rolebinding system-unrestricted-psp-role-default --clusterrole=system-unrestricted-psp-role --serviceaccount=supporttools-website-master-${CI_BUILD_NUMBER}:default
      - kubectl apply -n supporttools-website-master-${CI_BUILD_NUMBER} -f /drone/src/deployment-ready/
      - kubectl apply -n supporttools-website-master-${CI_BUILD_NUMBER} -f /drone/src/deployment/ingress/master.yaml

  - name: Deploy-to-Dev
    image: supporttools/kube-builder:latest
    pull: always
    settings:
      kubernetes_server:
        from_secret: k8s_server
      kubernetes_token:
        from_secret: k8s_token
    commands:
      - if ! kubectl get ns supporttools-website-dev; then kubectl create ns supporttools-website-dev; fi
      - if ! kubectl -n supporttools-website-dev get rolebinding system-unrestricted-psp-role-default; then kubectl -n supporttools-website-dev create rolebinding system-unrestricted-psp-role-default --clusterrole=system-unrestricted-psp-role --serviceaccount=supporttools-website-dev:default; fi
      - kubectl apply -n supporttools-website-dev -f /drone/src/deployment-ready/
      - kubectl apply -n supporttools-website-dev -f /drone/src/deployment/ingress/dev.yaml
      - kubectl scale -n supporttools-website-dev deployments/www --replicas=1
    when:
     event:
     - deployment
     - promote
     target:
     - dev

  - name: Deploy-to-Staging
    image: supporttools/kube-builder:latest
    pull: always
    settings:
      kubernetes_server:
        from_secret: k8s_server
      kubernetes_token:
        from_secret: k8s_token
    commands:
      - if ! kubectl get ns supporttools-website-staging; then kubectl create ns supporttools-website-staging; fi
      - if ! kubectl -n supporttools-website-staging get rolebinding system-unrestricted-psp-role-default; then kubectl -n supporttools-website-staging create rolebinding system-unrestricted-psp-role-default --clusterrole=system-unrestricted-psp-role --serviceaccount=supporttools-website-staging:default; fi
      - kubectl apply -n supporttools-website-staging -f /drone/src/deployment-ready/
      - kubectl apply -n supporttools-website-staging -f /drone/src/deployment/ingress/staging.yaml
      - kubectl scale -n supporttools-website-staging deployments/www --replicas=3
    when:
     event:
     - deployment
     - promote
     target:
     - staging

  - name: Deploy-to-Production
    image: supporttools/kube-builder:latest
    pull: always
    settings:
      kubernetes_server:
        from_secret: k8s_server
      kubernetes_token:
        from_secret: k8s_token
    commands:
      - if ! kubectl get ns supporttools-website-production; then kubectl create ns supporttools-website-production; fi
      - if ! kubectl -n supporttools-website-production get rolebinding system-unrestricted-psp-role-default; then kubectl -n supporttools-website-production create rolebinding system-unrestricted-psp-role-default --clusterrole=system-unrestricted-psp-role --serviceaccount=supporttools-website-production:default; fi
      - kubectl apply -n supporttools-website-production -f /drone/src/deployment-ready/
      - kubectl apply -n supporttools-website-production -f /drone/src/deployment/ingress/production.yaml
      - kubectl scale -n supporttools-website-production deployments/www --replicas=5
    when:
     event:
     - deployment
     - promote
     target:
     - production

node_selector:
  beta.kubernetes.io/arch: amd64
  beta.kubernetes.io/os: linux
  runner: true

tolerations:
- key: drone-runner
  operator: Exists
  effect: NoSchedule

image_pull_secrets:
- harbor

depends_on:
- Docker-Build-AMD64
- Docker-Build-ARM64