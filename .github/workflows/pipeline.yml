name: Docker Build and Push

on:
  [workflow_dispatch, push]

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: HUGO test build
        run: |
          docker run --rm -v $(pwd)/blog/:/src -w /src thegeeklab/hugo:latest --panicOnWarning --minify --gc --cleanDestinationDir --destination public --baseURL http://localhost
        
      # - name: html-validation
      #   run: |
      #     docker run --rm -v $(pwd)/blog/:/src -w /src thegeeklab/vnu vnu --skip-non-html --errors-only --filterfile .vnuignore public/

      # - name: Checking for draft content
      #   run: |
      #     grep -R 'draft: true' blog/content/post && exit 1 || exit 0
      
      - name: Checking for expired content
        run: |
          docker run --rm -v $(pwd)/blog/:/src -w /src thegeeklab/hugo:0.122 list expired

  Build:
    runs-on: ubuntu-latest
    needs: Test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Docker build and push
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --pull \
            --build-arg VERSION="v${{ github.run_number }}" \
            --build-arg GIT_COMMIT="${{ github.sha }}" \
            --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')" \
            --cache-from supporttools/website:latest \
            -t supporttools/website:v${{ github.run_number }} \
            -t supporttools/website:latest \
            --push \
            -f Dockerfile .

  Publish:
    runs-on: ubuntu-latest
    needs: Build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Helm Lint
        run: helm lint charts/website/

      - name: Package Helm chart
        run: |
          export CHART_VERSION="v${{ github.run_number }}"
          export APP_VERSION="v${{ github.run_number }}"
          export IMAGE_TAG="v${{ github.run_number }}"
          echo "CHART_VERSION=${CHART_VERSION}"
          echo "APP_VERSION=${APP_VERSION}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          envsubst < charts/website/Chart.yaml.template > charts/website/Chart.yaml
          envsubst < charts/website/values.yaml.template > charts/website/values.yaml
          helm package charts/website --destination helm/repo

      - name: Checkout helm-chart repository
        uses: actions/checkout@v4
        with:
          repository: SupportTools/helm-chart
          path: helm-chart
          token: ${{ secrets.BOT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"

      - name: Update Helm repository
        run: |
          cp helm/repo/website-*.tgz helm-chart/
          cd helm-chart
          helm repo index . --url https://charts.support.tools/
          git add .
          git commit -m "Update Helm chart for support.tools"
          git push

  Deploy-to-Master:
    runs-on: ubuntu-latest
    needs: Publish

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
  
      - name: Install and Configure rancher-projects
        run: |
          curl -fsSL -o rancher-projects.tar.gz https://github.com/SupportTools/rancher-projects/releases/download/v0.2.2/rancher-projects_0.2.2_linux_amd64.tar.gz
          tar -xvf rancher-projects.tar.gz
          chmod +x rancher-projects
          mv rancher-projects /usr/local/bin/
          rancher-projects --rancher-server ${{ secrets.CATTLE_SERVER }} --rancher-access-key ${{ secrets.CATTLE_ACCESS_KEY }} --rancher-secret-key ${{ secrets.CATTLE_SECRET_KEY }} --cluster-name a1-ops-dev --project-name "SupportTools" --namespace supporttools-mst --create-kubeconfig --kubeconfig "kubeconfig"
          kubectl --kubeconfig kubeconfig get nodes -o wide
  
      - name: Deploy to K8s
        run: |
          cat ./argocd/master.yaml | sed "s/CHARTVERSION/v${{ github.run_number }}/g" | kubectl --kubeconfig kubeconfig apply -f -